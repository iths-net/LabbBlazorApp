@page "/users"
@using System.Text.RegularExpressions
@using static LabbBlazorApp.Components.OrderableTableHeader<User>
@rendermode InteractiveServer
@attribute [StreamRendering]

<PageTitle>Users</PageTitle>

<h1>Users</h1>

<p>A list of some registered users.</p>

@if (showUsers == null)
{
	<div class="spinner-border text-primary" role="status"></div>
}
else
{
	<h3>@allUsers.GetUsers()?.Count() users</h3>

	<input @bind="searchQuery" @oninput="UpdateUsers" class="form-control" placeholder="Search for users" />

	<table class="table table-hover">
		<thead>
			<tr>
				@foreach (var (header, keySelector) in columns)
				{
					<th>
						<OrderableTableHeader T=User KeySelector="@keySelector" OnSort="@(s => { sorting = s; UpdateUsers(); })">@header</OrderableTableHeader>
					</th>
				}
			</tr>
		</thead>
		<tbody>
			@foreach (var user in showUsers)
			{
				<tr>
					@foreach (var (_, keySelector) in columns)
					{
						<td>@keySelector(user)</td>
					}
				</tr>
			}
			@if (showUsers.Count() < showableUsers)
			{
				<tr>
					<td>
						<button class="btn btn-sm btn-secondary" @onclick="@(() => { showMax *= 2; UpdateUsers(); })">Show more</button>
					</td>
					<td></td> <td></td> <td></td> <td></td> <td></td> <td></td> <td></td>
				</tr>
			}
		</tbody>
	</table>
}

@code {
	private record Column(string Header, Func<User, IComparable> KeySelector);

	private Column[] columns = [
		new("ID", u => u.Id),
		new("Name", u => u.Name),
		new("Email", u => u.Email),
		new("Street", u => u.Address.Street),
		new("City", u => u.Address.City),
		new("Zip code", u => u.Address.ZipCode),
		new("Company name", u => u.Company.Name),
		new("Company catch phrase", u => u.Company.CatchPhrase),
	];

	private static IUserDAL allUsers = new UserGenerator();

	private IEnumerable<User>? showUsers;
	private int showableUsers;
	private int showMax = 5;

	private string searchQuery = "";
	private Sorting sorting = new(u => u.Name, true);

	protected override async Task OnInitializedAsync()
	{
		allUsers.Load();

		await Task.Delay(1000);
		UpdateUsers();
	}

	private void UpdateUsers()
	{
		var searchKeywords = Regex.Split(searchQuery.ToLower(), "[ _.-]+").Where(s => s != "");
		var doSearch = searchKeywords.Count() != 0;

		IEnumerable<User> unlimitedUsers =
			(sorting.Asc ?
				allUsers.GetUsers().OrderBy(sorting.KeySelector) :
				allUsers.GetUsers().OrderByDescending(sorting.KeySelector));

		if (doSearch)
			unlimitedUsers = unlimitedUsers
				.Where(u =>
					UserKeywords(u, columns)
					.Any(s1 => searchKeywords.Any(s2 => s1.Contains(s2)))
				);

		showableUsers = unlimitedUsers.Count();
		showUsers = unlimitedUsers.Take(showMax);
		StateHasChanged();
	}

	private static IEnumerable<string> UserKeywords(User user, IEnumerable<Column> cols) =>
		cols.SelectMany(col => col.KeySelector(user).ToString()!.ToLower().Split(' '));
}
