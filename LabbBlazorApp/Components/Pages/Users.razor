@page "/users"
@using System.Text.RegularExpressions
@using static LabbBlazorApp.Components.OrderableTableHeader<User>
@rendermode InteractiveServer
@attribute [StreamRendering]

<PageTitle>Users</PageTitle>

<h1>Users</h1>

<p>A list of some registered users.</p>

@if (showUsers == null)
{
	<div class="spinner-border text-primary" role="status"></div>
}
else
{
	<h3>@allUsers.GetUsers()?.Count() users</h3>

	<input @bind="searchQuery" @oninput="UpdateUsers" class="form-control" placeholder="Search for users" />

	<table class="table table-hover">
		<thead>
			<tr>
				@foreach (var header in new (string, Func<User, IComparable>)[]
				{
					("ID", u => u.Id),
					("Name", u => u.Name),
					("Email", u => u.Email),
					("Street", u => u.Address.Street),
					("City", u => u.Address.City),
					("Zip code", u => u.Address.ZipCode),
					("Company name", u => u.Company.Name),
					("Company catch phrase", u => u.Company.CatchPhrase),
				})
				{
					<th>
						<OrderableTableHeader T=User KeySelector="@(header.Item2)" OnSort=@Sorted>@header.Item1</OrderableTableHeader>
					</th>
				}
			</tr>
		</thead>
		<tbody>
			@foreach (var user in showUsers)
			{
				<tr>
					<td>@user.Id</td>
					<td>@user.Name</td>
					<td>@user.Email</td>
					<td>@user.Address.Street</td>
					<td>@user.Address.City</td>
					<td>@user.Address.ZipCode</td>
					<td>@user.Company.Name</td>
					<td>@user.Company.CatchPhrase</td>
				</tr>
			}
			@if (showUsers.Count() < showableUsers)
			{
				<tr>
					<td>
						<button class="btn btn-sm btn-secondary" @onclick="ShowMore">Show more</button>
					</td>
					<td></td> <td></td> <td></td> <td></td> <td></td> <td></td> <td></td>
				</tr>
			}
		</tbody>
	</table>
}

@code {
	private static IUserDAL allUsers = new UserGenerator();

	private IEnumerable<User>? showUsers;
	private int showableUsers;
	private int showMax = 5;

	private string searchQuery = "";
	private Sorting sorting = new(u => u.Name, true);

	protected override async Task OnInitializedAsync()
	{
		allUsers.Load();

		await Task.Delay(100);
		UpdateUsers();
	}

	private void UpdateUsers()
	{
		var searchKeywords = Regex.Split(searchQuery.ToLower(), "[ _.-]+").Where(s => s != "");
		var noSearch = searchKeywords.Count() == 0;

		var unlimitedUsers =
			(sorting.asc ?
				allUsers.GetUsers().OrderBy(sorting.keySelector) :
				allUsers.GetUsers().OrderByDescending(sorting.keySelector))
		.Where(u => noSearch ||
			new[] {
				u.Id.ToString(),
				u.Name,
				u.Email,
				u.Address.Street,
				u.Address.City,
				u.Address.ZipCode,
				u.Company.Name,
				u.Company.CatchPhrase
			}
				.SelectMany(s => s.ToLower().Split(' '))
				.Any(s1 => searchKeywords.Any(s2 => s1.Contains(s2))));
		showableUsers = unlimitedUsers.Count();
		showUsers = unlimitedUsers.Take(showMax);
		StateHasChanged();
	}

	private void ShowMore()
	{
		showMax *= 2;
		UpdateUsers();
	}

	private void Sorted(Sorting sorting)
	{
		this.sorting = sorting;
		UpdateUsers();
	}
}
